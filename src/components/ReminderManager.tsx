import React, { useEffect, useRef } from 'react';
import { Todo } from '../types/todo';
import { useNotifications } from '../hooks/useNotifications';

interface ReminderManagerProps {
  todos: Todo[];
}

export function ReminderManager({ todos }: ReminderManagerProps) {
  const { 
    scheduleReminder, 
    cancelReminder, 
    cancelAllReminders,
    requestPermission, 
    permission,
    supported,
    scheduledCount,
    notificationInterval
  } = useNotifications();

  const lastProcessedTodos = useRef<string>('');
  const permissionRequested = useRef(false);
  const initializationComplete = useRef(false);

  // ÈÄöÁü•Ë®±ÂèØ„ÇíË¶ÅÊ±ÇÔºàÂàùÂõû„ÅÆ„ÅøÔºâ
  useEffect(() => {
    if (permission === 'default' && supported && !permissionRequested.current) {
      permissionRequested.current = true;
      console.log('üîî ÈÄöÁü•Ë®±ÂèØ„ÇíË¶ÅÊ±Ç„Åó„Åæ„Åô');
      
      // „É¶„Éº„Ç∂„Éº„Å´ÂàÜ„Åã„Çä„ÇÑ„Åô„ÅÑË™¨Êòé„ÇíË°®Á§∫
      const userConfirm = window.confirm(
        'Voice TODO App„Åã„Çâ„É™„Éû„Ç§„É≥„ÉÄ„ÉºÈÄöÁü•„ÇíÈÄÅ‰ø°„Åó„Åæ„Åô„ÄÇ\n' +
        '„Çø„Çπ„ÇØ„ÅÆÊúüÈôêÂâç„Å´ÈÄöÁü•„ÇíÂèó„ÅëÂèñ„Çã„Å´„ÅØ„ÄÅ„Éñ„É©„Ç¶„Ç∂„ÅÆÈÄöÁü•Ë®±ÂèØ„ÅåÂøÖË¶Å„Åß„Åô„ÄÇ\n\n' +
        'ÈÄöÁü•„ÇíË®±ÂèØ„Åó„Åæ„Åô„ÅãÔºü'
      );
      
      if (userConfirm) {
        requestPermission().then(granted => {
          if (granted) {
            console.log('‚úÖ ÈÄöÁü•Ë®±ÂèØ„ÅåÂèñÂæó„Åï„Çå„Åæ„Åó„Åü - „É™„Éû„Ç§„É≥„ÉÄ„Éº„ÇíÁÆ°ÁêÜ„Åó„Åæ„Åô');
            initializationComplete.current = true;
          } else {
            console.warn('‚ùå ÈÄöÁü•Ë®±ÂèØ„ÅåÊãíÂê¶„Åï„Çå„Åæ„Åó„Åü');
            alert('ÈÄöÁü•„ÅåÊãíÂê¶„Åï„Çå„Åæ„Åó„Åü„ÄÇ„É™„Éû„Ç§„É≥„ÉÄ„ÉºÊ©üËÉΩ„Çí‰ΩøÁî®„Åô„Çã„Å´„ÅØ„ÄÅ„Éñ„É©„Ç¶„Ç∂„ÅÆË®≠ÂÆö„ÅßÈÄöÁü•„ÇíË®±ÂèØ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ');
          }
        });
      } else {
        console.log('„É¶„Éº„Ç∂„Éº„ÅåÈÄöÁü•Ë®±ÂèØ„Çí„Ç≠„É£„É≥„Çª„É´„Åó„Åæ„Åó„Åü');
      }
    } else if (permission === 'granted') {
      initializationComplete.current = true;
    }
  }, [permission, requestPermission, supported]);

  // TODO„É™„Çπ„Éà„ÅÆÂ§âÊõ¥„ÇíÁõ£Ë¶ñÔºà‰∏çË¶Å„Å™ÂÜçÂá¶ÁêÜ„ÇíÈò≤„ÅêÔºâ
  useEffect(() => {
    // ÂàùÊúüÂåñ„ÅåÂÆå‰∫Ü„Åó„Å¶„ÅÑ„Å™„ÅÑÂ†¥Âêà„ÅØÂá¶ÁêÜ„Çí„Çπ„Ç≠„ÉÉ„Éó
    if (!initializationComplete.current) {
      console.log('ReminderManager: ÂàùÊúüÂåñ„ÅåÂÆå‰∫Ü„Åó„Å¶„ÅÑ„Å™„ÅÑ„Åü„ÇÅ„ÄÅÂá¶ÁêÜ„Çí„Çπ„Ç≠„ÉÉ„Éó„Åó„Åæ„Åô');
      return;
    }

    // TODO„É™„Çπ„Éà„ÅÆ„Éè„ÉÉ„Ç∑„É•„Çí‰ΩúÊàê„Åó„Å¶Â§âÊõ¥„ÇíÊ§úÂá∫
    const todosHash = JSON.stringify(
      todos
        .filter(t => t.reminderEnabled && !t.completed)
        .map(t => ({
          id: t.id,
          title: t.title,
          dueDate: t.dueDate.getTime(),
          dueTime: t.dueTime,
          reminderTime: t.reminderTime,
          completed: t.completed
        }))
        .sort((a, b) => a.id.localeCompare(b.id))
    );

    // ÂâçÂõû„Å®Âêå„ÅòÂÜÖÂÆπ„ÅÆÂ†¥Âêà„ÅØÂá¶ÁêÜ„Çí„Çπ„Ç≠„ÉÉ„Éó
    if (todosHash === lastProcessedTodos.current) {
      return;
    }

    lastProcessedTodos.current = todosHash;

    console.log('üîÑ ReminderManager: „É™„Éû„Ç§„É≥„ÉÄ„ÉºË®≠ÂÆö„ÇíÊõ¥Êñ∞„Åó„Åæ„Åô', {
      totalTodos: todos.length,
      todosWithReminders: todos.filter(t => t.reminderEnabled && !t.completed).length,
      permission,
      supported,
      notificationIntervalMinutes: notificationInterval / (1000 * 60)
    });

    // ÈÄöÁü•Ë®±ÂèØ„Åå„Å™„ÅÑÂ†¥Âêà„ÅØ‰Ωï„ÇÇ„Åó„Å™„ÅÑ
    if (permission !== 'granted') {
      console.log('‚ö†Ô∏è ÈÄöÁü•Ë®±ÂèØ„Åå„Å™„ÅÑ„Åü„ÇÅ„ÄÅ„É™„Éû„Ç§„É≥„ÉÄ„Éº„Çí„Çπ„Ç±„Ç∏„É•„Éº„É´„Åó„Åæ„Åõ„Çì');
      return;
    }

    // Êó¢Â≠ò„ÅÆ„É™„Éû„Ç§„É≥„ÉÄ„Éº„Çí„Åô„Åπ„Å¶„Ç≠„É£„É≥„Çª„É´
    cancelAllReminders();

    // ÊúâÂäπ„Å™„É™„Éû„Ç§„É≥„ÉÄ„Éº„Çí„Çπ„Ç±„Ç∏„É•„Éº„É´
    const activeReminders = todos.filter(todo => {
      if (!todo.reminderEnabled || todo.completed || !todo.reminderTime) {
        return false;
      }

      // „É™„Éû„Ç§„É≥„ÉÄ„ÉºÊôÇÂàª„ÇíË®àÁÆó
      const now = new Date();
      let reminderTime: Date;

      if (todo.dueTime) {
        const [hours, minutes] = todo.dueTime.split(':').map(Number);
        const dueDateTime = new Date(todo.dueDate);
        dueDateTime.setHours(hours, minutes, 0, 0);
        reminderTime = new Date(dueDateTime.getTime() - (todo.reminderTime * 60 * 1000));
      } else {
        reminderTime = new Date(todo.dueDate.getTime() - (todo.reminderTime * 60 * 1000));
      }

      const timeUntilReminder = reminderTime.getTime() - now.getTime();
      
      // Êú™Êù•„ÅÆ„É™„Éû„Ç§„É≥„ÉÄ„Éº„ÅÆ„Åø„ÇíÂØæË±°„Å®„Åô„Çã
      return timeUntilReminder > 0;
    });

    console.log(`üìã „Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Å™„É™„Éû„Ç§„É≥„ÉÄ„Éº: ${activeReminders.length}‰ª∂`);

    if (activeReminders.length === 0) {
      console.log('„Çπ„Ç±„Ç∏„É•„Éº„É´„Åô„Çã„É™„Éû„Ç§„É≥„ÉÄ„Éº„Åå„ÅÇ„Çä„Åæ„Åõ„Çì');
      return;
    }

    let successCount = 0;
    activeReminders.forEach(todo => {
      const timeoutId = scheduleReminder(todo);
      if (timeoutId) {
        successCount++;
        const now = new Date();
        let reminderTime: Date;

        if (todo.dueTime) {
          const [hours, minutes] = todo.dueTime.split(':').map(Number);
          const dueDateTime = new Date(todo.dueDate);
          dueDateTime.setHours(hours, minutes, 0, 0);
          reminderTime = new Date(dueDateTime.getTime() - (todo.reminderTime! * 60 * 1000));
        } else {
          reminderTime = new Date(todo.dueDate.getTime() - (todo.reminderTime! * 60 * 1000));
        }

        const timeUntilReminder = reminderTime.getTime() - now.getTime();
        console.log(`‚úÖ „É™„Éû„Ç§„É≥„ÉÄ„Éº„Çí„Çπ„Ç±„Ç∏„É•„Éº„É´„Åó„Åæ„Åó„Åü: ${todo.title} (${Math.round(timeUntilReminder / 1000 / 60)}ÂàÜÂæå)`);
      }
    });

    console.log(`üìä „É™„Éû„Ç§„É≥„ÉÄ„ÉºÁÆ°ÁêÜÁµêÊûú: ${successCount}/${activeReminders.length}‰ª∂„Åå„Çπ„Ç±„Ç∏„É•„Éº„É´„Åï„Çå„Åæ„Åó„Åü`);

    // „ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
    return () => {
      console.log('üßπ ReminderManager: „ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó„ÇíÂÆüË°å');
      cancelAllReminders();
    };
  }, [todos, scheduleReminder, cancelAllReminders, permission, notificationInterval, initializationComplete.current]);

  // ÈñãÁô∫„É¢„Éº„ÉâÁî®„ÅÆ„Éá„Éê„ÉÉ„Ç∞ÊÉÖÂ†±Ë°®Á§∫
  useEffect(() => {
    if (process.env.NODE_ENV === 'development') {
      console.log('üîß ReminderManager Debug Info:', {
        permission,
        supported,
        scheduledCount,
        todosWithReminders: todos.filter(t => t.reminderEnabled && !t.completed).length,
        initializationComplete: initializationComplete.current
      });
    }
  }, [permission, supported, scheduledCount, todos]);

  // „Åì„ÅÆ„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„ÅØ‰Ωï„ÇÇË°®Á§∫„Åó„Å™„ÅÑ
  return null;
}