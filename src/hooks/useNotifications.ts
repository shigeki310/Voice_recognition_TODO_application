import { useState, useEffect, useCallback, useRef } from 'react';
import { Todo } from '../types/todo';

interface NotificationState {
  permission: NotificationPermission;
  supported: boolean;
  debugInfo: {
    lastError?: string;
    lastNotificationTime?: string;
    permissionRequestCount: number;
    notificationAttempts: number;
    successfulNotifications: number;
  };
}

interface ScheduledReminder {
  todoId: string;
  timeoutId: number;
  scheduledTime: Date;
  reminderTime: Date;
}

export function useNotifications() {
  const [state, setState] = useState<NotificationState>({
    permission: 'default',
    supported: false,
    debugInfo: {
      permissionRequestCount: 0,
      notificationAttempts: 0,
      successfulNotifications: 0
    }
  });

  const [scheduledReminders, setScheduledReminders] = useState<ScheduledReminder[]>([]);
  const lastNotificationTime = useRef<Record<string, number>>({});
  const initializationRef = useRef(false);

  // ÈÄöÁü•ÈñìÈöî„Çí1ÂàÜÔºà60000„Éü„É™ÁßíÔºâ„Å´Áü≠Á∏ÆÔºà„ÉÜ„Çπ„ÉàÁî®Ôºâ
  const NOTIFICATION_INTERVAL = 1 * 60 * 1000; // 1ÂàÜ

  // Ë©≥Á¥∞„Å™„Éá„Éê„ÉÉ„Ç∞„É≠„Ç∞Èñ¢Êï∞
  const debugLog = useCallback((message: string, data?: any) => {
    const timestamp = new Date().toLocaleTimeString();
    console.log(`üîî [${timestamp}] ${message}`, data || '');
  }, []);

  // ÂàùÊúüÂåñÂá¶ÁêÜ
  useEffect(() => {
    if (initializationRef.current) return;
    initializationRef.current = true;

    debugLog('ÈÄöÁü•„Ç∑„Çπ„ÉÜ„É†„ÇíÂàùÊúüÂåñ‰∏≠...');

    // „Éñ„É©„Ç¶„Ç∂„Çµ„Éù„Éº„Éà„ÉÅ„Çß„ÉÉ„ÇØ
    const supported = 'Notification' in window;
    const permission = supported ? Notification.permission : 'denied';

    debugLog('„Éñ„É©„Ç¶„Ç∂Áí∞Â¢É„ÉÅ„Çß„ÉÉ„ÇØ', {
      supported,
      permission,
      userAgent: navigator.userAgent,
      protocol: window.location.protocol,
      isSecureContext: window.isSecureContext
    });

    setState(prev => ({
      ...prev,
      permission,
      supported,
      debugInfo: {
        ...prev.debugInfo,
        lastError: supported ? undefined : '„Éñ„É©„Ç¶„Ç∂„ÅåÈÄöÁü•„Çí„Çµ„Éù„Éº„Éà„Åó„Å¶„ÅÑ„Åæ„Åõ„Çì'
      }
    }));

    if (!supported) {
      debugLog('‚ùå „Åì„ÅÆ„Éñ„É©„Ç¶„Ç∂„ÅØÈÄöÁü•Ê©üËÉΩ„Çí„Çµ„Éù„Éº„Éà„Åó„Å¶„ÅÑ„Åæ„Åõ„Çì');
      return;
    }

    if (permission === 'granted') {
      debugLog('‚úÖ ÈÄöÁü•Ë®±ÂèØ„ÅØÊó¢„Å´ÂèñÂæóÊ∏à„Åø„Åß„Åô');
      // „ÉÜ„Çπ„ÉàÈÄöÁü•„ÇíÈÄÅ‰ø°
      setTimeout(() => {
        testBrowserNotification();
      }, 1000);
    } else {
      debugLog('‚ö†Ô∏è ÈÄöÁü•Ë®±ÂèØ„ÅåÂøÖË¶Å„Åß„Åô', { currentPermission: permission });
    }
  }, []);

  // „Éñ„É©„Ç¶„Ç∂„ÅÆÈÄöÁü•Ê©üËÉΩ„Çí„ÉÜ„Çπ„Éà
  const testBrowserNotification = useCallback(() => {
    debugLog('„Éñ„É©„Ç¶„Ç∂ÈÄöÁü•Ê©üËÉΩ„Çí„ÉÜ„Çπ„Éà‰∏≠...');
    
    try {
      const testNotification = new Notification('Voice TODO App', {
        body: 'ÈÄöÁü•„Ç∑„Çπ„ÉÜ„É†„ÅåÊ≠£Â∏∏„Å´Âãï‰Ωú„Åó„Å¶„ÅÑ„Åæ„Åô',
        icon: '/vite.svg',
        tag: 'system-test',
        requireInteraction: false,
        silent: false
      });

      debugLog('‚úÖ „ÉÜ„Çπ„ÉàÈÄöÁü•„Çí‰ΩúÊàê„Åó„Åæ„Åó„Åü');

      testNotification.onshow = () => {
        debugLog('‚úÖ „ÉÜ„Çπ„ÉàÈÄöÁü•„ÅåË°®Á§∫„Åï„Çå„Åæ„Åó„Åü');
        setState(prev => ({
          ...prev,
          debugInfo: {
            ...prev.debugInfo,
            successfulNotifications: prev.debugInfo.successfulNotifications + 1,
            lastNotificationTime: new Date().toLocaleString()
          }
        }));
      };

      testNotification.onerror = (error) => {
        debugLog('‚ùå „ÉÜ„Çπ„ÉàÈÄöÁü•„Åß„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü', error);
        setState(prev => ({
          ...prev,
          debugInfo: {
            ...prev.debugInfo,
            lastError: '„ÉÜ„Çπ„ÉàÈÄöÁü•„ÅÆË°®Á§∫„Å´Â§±Êïó„Åó„Åæ„Åó„Åü'
          }
        }));
      };

      testNotification.onclick = () => {
        debugLog('„ÉÜ„Çπ„ÉàÈÄöÁü•„Åå„ÇØ„É™„ÉÉ„ÇØ„Åï„Çå„Åæ„Åó„Åü');
        testNotification.close();
      };

      // 5ÁßíÂæå„Å´Ëá™Âãï„ÅßÈñâ„Åò„Çã
      setTimeout(() => {
        testNotification.close();
      }, 5000);

    } catch (error) {
      debugLog('‚ùå „ÉÜ„Çπ„ÉàÈÄöÁü•„ÅÆ‰ΩúÊàê„Å´Â§±Êïó„Åó„Åæ„Åó„Åü', error);
      setState(prev => ({
        ...prev,
        debugInfo: {
          ...prev.debugInfo,
          lastError: `„ÉÜ„Çπ„ÉàÈÄöÁü•„Ç®„É©„Éº: ${error}`
        }
      }));
    }
  }, [debugLog]);

  const requestPermission = useCallback(async (): Promise<boolean> => {
    if (!state.supported) {
      debugLog('‚ùå ÈÄöÁü•Ê©üËÉΩ„Åå„Çµ„Éù„Éº„Éà„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì');
      return false;
    }

    setState(prev => ({
      ...prev,
      debugInfo: {
        ...prev.debugInfo,
        permissionRequestCount: prev.debugInfo.permissionRequestCount + 1
      }
    }));

    if (state.permission === 'granted') {
      debugLog('‚úÖ ÈÄöÁü•Ë®±ÂèØ„ÅØÊó¢„Å´ÂèñÂæóÊ∏à„Åø„Åß„Åô');
      return true;
    }

    try {
      debugLog('üîî ÈÄöÁü•Ë®±ÂèØ„ÇíË¶ÅÊ±Ç‰∏≠...', {
        currentPermission: state.permission,
        requestCount: state.debugInfo.permissionRequestCount + 1
      });

      const permission = await Notification.requestPermission();
      
      debugLog('ÈÄöÁü•Ë®±ÂèØ„ÅÆÁµêÊûú', {
        newPermission: permission,
        previousPermission: state.permission
      });

      setState(prev => ({ 
        ...prev, 
        permission,
        debugInfo: {
          ...prev.debugInfo,
          lastError: permission === 'granted' ? undefined : `ÈÄöÁü•Ë®±ÂèØ„ÅåÊãíÂê¶„Åï„Çå„Åæ„Åó„Åü: ${permission}`
        }
      }));
      
      if (permission === 'granted') {
        debugLog('‚úÖ ÈÄöÁü•Ë®±ÂèØ„ÅåÂèñÂæó„Åï„Çå„Åæ„Åó„Åü - „ÉÜ„Çπ„ÉàÈÄöÁü•„ÇíÈÄÅ‰ø°„Åó„Åæ„Åô');
        setTimeout(() => {
          testBrowserNotification();
        }, 500);
        return true;
      } else {
        debugLog('‚ùå ÈÄöÁü•Ë®±ÂèØ„ÅåÊãíÂê¶„Åï„Çå„Åæ„Åó„Åü', permission);
        return false;
      }
    } catch (error) {
      debugLog('‚ùå ÈÄöÁü•Ë®±ÂèØ„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü', error);
      setState(prev => ({
        ...prev,
        debugInfo: {
          ...prev.debugInfo,
          lastError: `Ë®±ÂèØË¶ÅÊ±Ç„Ç®„É©„Éº: ${error}`
        }
      }));
      return false;
    }
  }, [state.supported, state.permission, state.debugInfo.permissionRequestCount, debugLog, testBrowserNotification]);

  const showNotification = useCallback((title: string, options?: NotificationOptions, todoId?: string) => {
    setState(prev => ({
      ...prev,
      debugInfo: {
        ...prev.debugInfo,
        notificationAttempts: prev.debugInfo.notificationAttempts + 1
      }
    }));

    debugLog('ÈÄöÁü•Ë°®Á§∫„ÇíË©¶Ë°å‰∏≠', {
      title,
      todoId,
      supported: state.supported,
      permission: state.permission,
      attemptNumber: state.debugInfo.notificationAttempts + 1
    });

    if (!state.supported) {
      const error = 'ÈÄöÁü•Ê©üËÉΩ„Åå„Çµ„Éù„Éº„Éà„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì';
      debugLog('‚ùå ' + error);
      setState(prev => ({
        ...prev,
        debugInfo: { ...prev.debugInfo, lastError: error }
      }));
      return null;
    }

    if (state.permission !== 'granted') {
      const error = `ÈÄöÁü•Ë®±ÂèØ„ÅåÂèñÂæó„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇÁèæÂú®„ÅÆÁä∂ÊÖã: ${state.permission}`;
      debugLog('‚ùå ' + error);
      setState(prev => ({
        ...prev,
        debugInfo: { ...prev.debugInfo, lastError: error }
      }));
      return null;
    }

    // Âêå„ÅòTODO„ÅÆÈÄöÁü•ÈñìÈöî„ÉÅ„Çß„ÉÉ„ÇØ
    const now = Date.now();
    if (todoId && lastNotificationTime.current[todoId]) {
      const timeSinceLastNotification = now - lastNotificationTime.current[todoId];
      if (timeSinceLastNotification < NOTIFICATION_INTERVAL) {
        const message = `ÈÄöÁü•ÈñìÈöî„ÅåÁü≠„Åô„Åé„Çã„Åü„ÇÅ„ÄÅÈÄöÁü•„Çí„Çπ„Ç≠„ÉÉ„Éó„Åó„Åæ„Åó„ÅüÔºàÂâçÂõû„Åã„Çâ${Math.round(timeSinceLastNotification / 1000 / 60)}ÂàÜÁµåÈÅéÔºâ`;
        debugLog('‚è≠Ô∏è ' + message);
        return null;
      }
    }

    try {
      const notificationOptions = {
        icon: '/vite.svg',
        badge: '/vite.svg',
        requireInteraction: true,
        silent: false,
        timestamp: Date.now(),
        ...options
      };

      debugLog('ÈÄöÁü•„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„Çí‰ΩúÊàê‰∏≠', {
        title,
        options: notificationOptions
      });

      const notification = new Notification(title, notificationOptions);

      debugLog('‚úÖ ÈÄöÁü•„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„Åå‰ΩúÊàê„Åï„Çå„Åæ„Åó„Åü');

      // ÈÄöÁü•„Ç§„Éô„É≥„Éà„Éè„É≥„Éâ„É©„Éº
      notification.onshow = () => {
        debugLog('üéâ ÈÄöÁü•„ÅåË°®Á§∫„Åï„Çå„Åæ„Åó„Åü!', title);
        setState(prev => ({
          ...prev,
          debugInfo: {
            ...prev.debugInfo,
            successfulNotifications: prev.debugInfo.successfulNotifications + 1,
            lastNotificationTime: new Date().toLocaleString(),
            lastError: undefined
          }
        }));
        
        if (todoId) {
          lastNotificationTime.current[todoId] = now;
        }
      };

      notification.onerror = (error) => {
        debugLog('‚ùå ÈÄöÁü•Ë°®Á§∫„Ç®„É©„Éº', error);
        setState(prev => ({
          ...prev,
          debugInfo: {
            ...prev.debugInfo,
            lastError: `ÈÄöÁü•Ë°®Á§∫„Ç®„É©„Éº: ${error}`
          }
        }));
      };

      notification.onclick = () => {
        debugLog('ÈÄöÁü•„Åå„ÇØ„É™„ÉÉ„ÇØ„Åï„Çå„Åæ„Åó„Åü', title);
        window.focus();
        notification.close();
      };

      notification.onclose = () => {
        debugLog('ÈÄöÁü•„ÅåÈñâ„Åò„Çâ„Çå„Åæ„Åó„Åü', title);
      };

      // Ëá™Âãï„ÅßÈñâ„Åò„ÇãÔºà20ÁßíÂæåÔºâ
      setTimeout(() => {
        notification.close();
        debugLog('ÈÄöÁü•„ÇíËá™Âãï„ÅßÈñâ„Åò„Åæ„Åó„Åü', title);
      }, 20000);

      return notification;
    } catch (error) {
      const errorMessage = `ÈÄöÁü•„ÅÆË°®Á§∫„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ${error}`;
      debugLog('‚ùå ' + errorMessage, error);
      setState(prev => ({
        ...prev,
        debugInfo: {
          ...prev.debugInfo,
          lastError: errorMessage
        }
      }));
      return null;
    }
  }, [state.permission, state.supported, state.debugInfo.notificationAttempts, NOTIFICATION_INTERVAL, debugLog]);

  const scheduleReminder = useCallback((todo: Todo) => {
    if (!todo.reminderEnabled || !todo.reminderTime) {
      debugLog('„É™„Éû„Ç§„É≥„ÉÄ„Éº„ÅåÁÑ°Âäπ„Åæ„Åü„ÅØÊôÇÈñì„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì', {
        title: todo.title,
        reminderEnabled: todo.reminderEnabled,
        reminderTime: todo.reminderTime
      });
      return null;
    }

    const now = new Date();
    let reminderTime: Date;

    // ÊôÇÂàª„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„ÇãÂ†¥Âêà„ÅØ„ÄÅ„Åù„ÅÆÊôÇÂàª„Åã„ÇâË®àÁÆó
    if (todo.dueTime) {
      const [hours, minutes] = todo.dueTime.split(':').map(Number);
      const dueDateTime = new Date(todo.dueDate);
      dueDateTime.setHours(hours, minutes, 0, 0);
      reminderTime = new Date(dueDateTime.getTime() - (todo.reminderTime * 60 * 1000));
    } else {
      // ÊôÇÂàª„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑÂ†¥Âêà„ÅØ„ÄÅÊó•‰ªò„ÅÆÈñãÂßãÊôÇÂàª„Åã„ÇâË®àÁÆó
      reminderTime = new Date(todo.dueDate.getTime() - (todo.reminderTime * 60 * 1000));
    }

    const timeUntilReminder = reminderTime.getTime() - now.getTime();

    debugLog('„É™„Éû„Ç§„É≥„ÉÄ„ÉºÊôÇÂàª„ÇíË®àÁÆó', {
      todo: todo.title,
      dueDate: todo.dueDate.toLocaleString(),
      dueTime: todo.dueTime,
      reminderMinutes: todo.reminderTime,
      calculatedReminderTime: reminderTime.toLocaleString(),
      timeUntilReminderMs: timeUntilReminder,
      timeUntilReminderMinutes: Math.round(timeUntilReminder / 1000 / 60)
    });

    if (timeUntilReminder <= 0) {
      debugLog('‚ö†Ô∏è „É™„Éû„Ç§„É≥„ÉÄ„ÉºÊôÇÂàª„ÅåÊó¢„Å´ÈÅé„Åé„Å¶„ÅÑ„Åæ„Åô', {
        todo: todo.title,
        reminderTime: reminderTime.toLocaleString(),
        now: now.toLocaleString(),
        pastByMinutes: Math.abs(timeUntilReminder / 1000 / 60).toFixed(1)
      });
      return null;
    }
    
    debugLog('‚è∞ „É™„Éû„Ç§„É≥„ÉÄ„Éº„Çí„Çπ„Ç±„Ç∏„É•„Éº„É´„Åó„Åæ„Åô', {
      todo: todo.title,
      reminderTime: reminderTime.toLocaleString(),
      minutesUntil: Math.round(timeUntilReminder / 1000 / 60),
      hoursUntil: Math.round(timeUntilReminder / 1000 / 60 / 60)
    });

    const timeoutId = window.setTimeout(() => {
      debugLog('üîî „É™„Éû„Ç§„É≥„ÉÄ„ÉºÈÄöÁü•„ÇíË°®Á§∫„Åó„Åæ„Åô', {
        todo: todo.title,
        scheduledTime: reminderTime.toLocaleString(),
        actualTime: new Date().toLocaleString()
      });
      
      showNotification(`üìã „É™„Éû„Ç§„É≥„ÉÄ„Éº: ${todo.title}`, {
        body: todo.description || 'ÊúüÈôê„ÅåËøë„Å•„ÅÑ„Å¶„ÅÑ„Åæ„Åô',
        tag: `reminder-${todo.id}`,
        icon: '/vite.svg',
        requireInteraction: true,
      }, todo.id);

      // „Çπ„Ç±„Ç∏„É•„Éº„É´„É™„Çπ„Éà„Åã„ÇâÂâäÈô§
      setScheduledReminders(prev => 
        prev.filter(reminder => reminder.timeoutId !== timeoutId)
      );
    }, timeUntilReminder);

    // „Çπ„Ç±„Ç∏„É•„Éº„É´„É™„Çπ„Éà„Å´ËøΩÂä†
    const newReminder: ScheduledReminder = {
      todoId: todo.id,
      timeoutId,
      scheduledTime: now,
      reminderTime
    };

    setScheduledReminders(prev => [
      ...prev.filter(reminder => reminder.todoId !== todo.id),
      newReminder
    ]);

    debugLog('‚úÖ „É™„Éû„Ç§„É≥„ÉÄ„Éº„Åå„Çπ„Ç±„Ç∏„É•„Éº„É´„Åï„Çå„Åæ„Åó„Åü', {
      todoId: todo.id,
      timeoutId,
      reminderTime: reminderTime.toLocaleString()
    });

    return timeoutId;
  }, [showNotification, debugLog]);

  const cancelReminder = useCallback((todoId: string) => {
    const reminder = scheduledReminders.find(r => r.todoId === todoId);
    if (reminder) {
      clearTimeout(reminder.timeoutId);
      setScheduledReminders(prev => 
        prev.filter(r => r.todoId !== todoId)
      );
      debugLog('‚ùå „É™„Éû„Ç§„É≥„ÉÄ„Éº„Çí„Ç≠„É£„É≥„Çª„É´„Åó„Åæ„Åó„Åü', {
        todoId,
        timeoutId: reminder.timeoutId
      });
    }
  }, [scheduledReminders, debugLog]);

  const cancelAllReminders = useCallback(() => {
    if (scheduledReminders.length > 0) {
      scheduledReminders.forEach(reminder => {
        clearTimeout(reminder.timeoutId);
      });
      setScheduledReminders([]);
      debugLog(`‚ùå ${scheduledReminders.length}‰ª∂„ÅÆ„É™„Éû„Ç§„É≥„ÉÄ„Éº„Çí„Ç≠„É£„É≥„Çª„É´„Åó„Åæ„Åó„Åü`);
    }
  }, [scheduledReminders, debugLog]);

  // „ÉÜ„Çπ„ÉàÁî®„ÅÆÂç≥Â∫ßÈÄöÁü•Ê©üËÉΩ
  const testNotification = useCallback((todo: Todo) => {
    debugLog('üß™ „ÉÜ„Çπ„ÉàÈÄöÁü•„ÇíÂÆüË°å„Åó„Åæ„Åô', {
      todo: todo.title,
      permission: state.permission,
      supported: state.supported
    });
    
    if (state.permission !== 'granted') {
      const message = 'ÈÄöÁü•Ë®±ÂèØ„ÅåÂèñÂæó„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑ„Åü„ÇÅ„ÄÅ„ÉÜ„Çπ„ÉàÈÄöÁü•„ÇíË°®Á§∫„Åß„Åç„Åæ„Åõ„Çì';
      debugLog('‚ùå ' + message);
      alert(`${message}\n\nÁèæÂú®„ÅÆË®±ÂèØÁä∂ÊÖã: ${state.permission}\n\n„Éñ„É©„Ç¶„Ç∂„ÅÆË®≠ÂÆö„ÅßÈÄöÁü•„ÇíË®±ÂèØ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ`);
      return;
    }
    
    // „ÉÜ„Çπ„ÉàÈÄöÁü•„ÅØÈñìÈöîÂà∂Èôê„ÇíÁÑ°Ë¶ñ
    try {
      const notification = new Notification(`üß™ „ÉÜ„Çπ„ÉàÈÄöÁü•: ${todo.title}`, {
        body: todo.description || '„Åì„Çå„ÅØ„ÉÜ„Çπ„ÉàÈÄöÁü•„Åß„Åô',
        tag: `test-${todo.id}`,
        icon: '/vite.svg',
        requireInteraction: false,
        timestamp: Date.now()
      });

      notification.onshow = () => {
        debugLog('‚úÖ „ÉÜ„Çπ„ÉàÈÄöÁü•„ÅåË°®Á§∫„Åï„Çå„Åæ„Åó„Åü');
      };

      notification.onerror = (error) => {
        debugLog('‚ùå „ÉÜ„Çπ„ÉàÈÄöÁü•„Åß„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü', error);
      };

      notification.onclick = () => {
        window.focus();
        notification.close();
      };

      setTimeout(() => {
        notification.close();
      }, 5000);
    } catch (error) {
      debugLog('‚ùå „ÉÜ„Çπ„ÉàÈÄöÁü•„ÅÆË°®Á§∫„Å´Â§±Êïó„Åó„Åæ„Åó„Åü', error);
      alert(`„ÉÜ„Çπ„ÉàÈÄöÁü•„ÅÆË°®Á§∫„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ${error}`);
    }
  }, [state.permission, state.supported, debugLog]);

  // „Éá„Éê„ÉÉ„Ç∞ÊÉÖÂ†±„ÇíË°®Á§∫„Åô„ÇãÈñ¢Êï∞
  const showDebugInfo = useCallback(() => {
    const info = {
      ÈÄöÁü•„Çµ„Éù„Éº„Éà: state.supported ? '‚úÖ „Çµ„Éù„Éº„ÉàÊ∏à„Åø' : '‚ùå Êú™„Çµ„Éù„Éº„Éà',
      ÈÄöÁü•Ë®±ÂèØ: state.permission,
      Ë®±ÂèØË¶ÅÊ±ÇÂõûÊï∞: state.debugInfo.permissionRequestCount,
      ÈÄöÁü•Ë©¶Ë°åÂõûÊï∞: state.debugInfo.notificationAttempts,
      ÊàêÂäü„Åó„ÅüÈÄöÁü•: state.debugInfo.successfulNotifications,
      ÊúÄÂæå„ÅÆÈÄöÁü•ÊôÇÂàª: state.debugInfo.lastNotificationTime || 'Êú™ÂÆüË°å',
      ÊúÄÂæå„ÅÆ„Ç®„É©„Éº: state.debugInfo.lastError || '„Å™„Åó',
      „Çπ„Ç±„Ç∏„É•„Éº„É´Ê∏à„Åø„É™„Éû„Ç§„É≥„ÉÄ„Éº: scheduledReminders.length,
      „Éñ„É©„Ç¶„Ç∂: navigator.userAgent,
      „Éó„É≠„Éà„Ç≥„É´: window.location.protocol,
      „Çª„Ç≠„É•„Ç¢„Ç≥„É≥„ÉÜ„Ç≠„Çπ„Éà: window.isSecureContext ? '‚úÖ' : '‚ùå'
    };

    console.table(info);
    alert(`ÈÄöÁü•„Ç∑„Çπ„ÉÜ„É† „Éá„Éê„ÉÉ„Ç∞ÊÉÖÂ†±:\n\n${Object.entries(info).map(([key, value]) => `${key}: ${value}`).join('\n')}`);
  }, [state, scheduledReminders.length]);

  return {
    ...state,
    requestPermission,
    showNotification,
    scheduleReminder,
    cancelReminder,
    cancelAllReminders,
    testNotification,
    showDebugInfo,
    scheduledCount: scheduledReminders.length,
    scheduledReminders,
    notificationInterval: NOTIFICATION_INTERVAL
  };
}